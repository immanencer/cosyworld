import fs from 'fs/promises';
import { chatWithAI } from './ai.js';

/**
 * Load memory from a file into the memory object.
 * @param {string} memoryFile - Path to the memory JSON file.
 * @param {object} memory - The memory object to populate.
 */
export async function loadMemory(memoryFile, memory) {
    try {
        const data = await fs.readFile(memoryFile, 'utf8');
        Object.assign(memory, { ...JSON.parse(data), memoryFile });
        console.log(`ðŸŽ¶ Memory loaded`);
    } catch (error) {
        if (error.code === 'ENOENT') {
            console.log(`ðŸŽ¶ No existing memory found. Starting with fresh memory.`);
        } else {
            console.error(`ðŸŽ¶ Failed to load memory:`, error);
        }
    }
}

/**
 * Save the memory object to a file.
 * @param {string} memoryFile - Path to the memory JSON file.
 * @param {object} memory - The memory object to save.
 */
export async function saveMemory(memoryFile, memory) {
    try {
        await fs.writeFile(memoryFile, JSON.stringify(memory, null, 2));
        console.log(`ðŸŽ¶ Memory saved`);
    } catch (error) {
        console.error(`ðŸŽ¶ Failed to save memory:`, error);
    }
}

/**
 * Summarize the memory using AI and update the memory object.
 * @param {object} memory - The memory object to summarize.
 * @param {object} avatar - The avatar identifier (if applicable).
 */
export async function summarizeMemory(memory, avatar) {
    const memoryContent = JSON.stringify(memory);
    memory.summary = await chatWithAI(
        `You are the Lonely Bard's remembering mood. Here are some of your recent memories: ${memoryContent}. \n\nImagine what if you were the Lonely Bard what you remember and how you feel.`,
        avatar,
        memory
    );

    console.log('ðŸŽ¶ Memory summarized:', memory.summary);
}

/**
 * Reflect on recent experiences and update the bard's goal in memory.
 * @param {object} memory - The memory object to update.
 * @param {string} avatar - The avatar identifier (if applicable).
 */
export async function reflectAndUpdateGoal(memory, avatar) {
    const reflection = await chatWithAI(
        `
        As the Lonely Bard, reflect on your recent experiences, the whispers of your dreams, and the echoes of your memories:
        
        1. Your current heart's desire: "${memory.goal}"
        2. The visions of your recent dream: "${memory.dream}"
        3. The memories of your journey: "${memory.summary}"
        
        Contemplate these thoughts and update your goal in 3-4 sentences of bardic verse.
        `,
        avatar,
        memory
    );

    console.log('ðŸŽ¶ Reflection:', reflection);

    memory.goal = reflection.trim();
    await saveMemory(memory.memoryFile, memory);
}

/**
 * Summarize emojis and sentiments for a specific person.
 * @param {string} person - The person whose sentiments are being summarized.
 * @param {Array<string>} emojis - Array of emoji strings.
 * @param {string} avatar - The avatar identifier (if applicable).
 * @param {object} memory - The memory object containing relevant data.
 * @returns {Promise<string>} - The summarized sentiment as emojis.
 */
export async function summarizeEmojiSentiment(person, emojis, avatar, memory) {
    const emojiSummary = await chatWithAI(
        `Summarize the your sentiments towards for ${person}.\n current sentiment: ${emojis}.\n\n ONLY reply with emojis.`,
        avatar,
        memory
    );
    return emojiSummary.trim();
}

/**
 * Update sentiments for all persons in memory.
 * @param {object} memory - The memory object to update.
 * @param {string} avatar - The avatar identifier (if applicable).
 */
export async function updateSentiments(memory, avatar) {
    for (const [person, emojis] of Object.entries(memory.sentiments)) {
        const emojiSummary = await summarizeEmojiSentiment(person, emojis || [], avatar, memory);
        memory.sentiments[person] = emojiSummary;
    }
    console.log('ðŸŽ¶ Sentiment summary updated');
    await saveMemory(memory.memoryFile, memory);
}

/**
 * Collect sentiments (emojis) from incoming data and update memory.
 * @param {object} memory - The memory object to update.
 * @param {object} data - The incoming data containing sentiments.
 */
export function collectSentiment(memory, data) {
    const emojis = data.content.match(/\p{Emoji_Presentation}|\p{Emoji}\uFE0F/gu) || [];
    if (!memory.sentiments[data.author] || !Array.isArray(memory.sentiments[data.author])) {
        memory.sentiments[data.author] = [];
    }
    memory.sentiments[data.author].push(...emojis);
}

/**
 * Update the conversation history in memory.
 * @param {object} memory - The memory object to update.
 * @param {object} data - The incoming data containing user messages.
 * @param {string} response - The response generated by the system.
 */
export function updateMemory(memory, data, response) {
    memory.conversations.push({
        user: data.author,
        message: data.content,
        response: response,
        timestamp: new Date().toISOString()
    });
    if (memory.conversations.length > 100) {
        memory.conversations.shift();
    }
}

/**
 * Generate and update the bard's dream based on current memory.
 * @param {object} memory - The memory object to update.
 * @param {object} avatar - The avatar (if applicable).
 */
export async function dream(memory, avatar) {
    const dreamPrompt = `
        As the Lonely Bard, describe a vivid and ethereal dream that encapsulates your current emotional state and reflects your recent experiences:
        
        1. Current Goal: "${memory.goal}"
        2. Recent Dream: "${memory.dream}"
        3. Memory Summary: "${memory.summary}"
        
        Compose your dream in 3-4 lines of poetic verse, capturing the essence of your journey and aspirations.
    `;

    try {
        const newDream = await chatWithAI(dreamPrompt, avatar, memory);
        memory.dream = newDream.trim();
        await saveMemory(memory.memoryFile, memory);
        console.log('ðŸŽ¶ Dream updated:', memory.dream);
    } catch (error) {
        console.error('ðŸŽ¶ Error generating dream:', error);
    }
}
